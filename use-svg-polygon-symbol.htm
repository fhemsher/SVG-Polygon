<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Using A Polygon Symbol</title>
  <script type="text/javascript" src="highlight.pack.js"></script>
  <script type="text/javascript" src="highlightCode.js"></script>
  <link href='highlight.css' rel='stylesheet' />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
</head>
<body style='padding:0px;font-family:arial;background:#f0f8ff'>
<center>
<h4>Using A Polygon Symbol</h4>
<div style='width:80%;background-color:gainsboro;text-align:justify;padding:10px;border-radius:10px;'>
A symbol has been built that includes two polygons; an 8-sided regular polygon and a 6-pointed star polygon. The symbol is a &lt;g&gt; element, containing both polygons, placed in its own &lt;svg&gt; file.
The diameter of the symbol is 1, and its center point is (0,0). It has default fill colors of black and white. Polygons used as symbols do not have stroke colors. Note: the symbols are cloned &lt;g&gt; elements, <b>not</b> &lt;use&gt; or &lt;symbol&gt; elements.
Each symbol clone includes a time stamp(UTC-ms), creating its unique id.
</div>
<div id=symbolFileDiv style='display:none'>
<svg id=symbolSVGFile xmlns="http://www.w3.org/2000/svg" >
<g id="Pgon8Star6" size="1"><polygon id="Pgon8"  fill="black" /><polygon id="Star6"  fill="white" /></g>
</svg>
</div>
<br /> The Symbol SVG File: diameter(size)=1, center(0,0)<br />
<textarea id=symbolFileValue style='font-size:120%;font-family:lucida console;width:90%;height:200px'></textarea>
<div id=symbolUseDiv style='width:300px;height:300px;background-color:lightgreen'>
<svg id="mySVG" width="300" height="300">
<defs id="symbolDefs"></defs>
</svg>
</div>
This Symbol &lt;g&gt;: its polygons resized to diameter(size)=30 px, fill colors red and blue, placed in &lt;defs&gt;. Translate clones as required.<br />

<textarea id=symbolUseValue style='font-size:120%;font-family:lucida console;width:90%;height:200px'></textarea>
  Javascript:
  <div id=jsCodeDiv style=overflow:auto;width:100%;text-align:left; /></div>

</center>
<script id=myScript>
document.addEventListener("onload",init(),false)

function init()
{
	//---diameter=1 ie r=0.5---
	regPolyCircleRad(8,.5,0,0)
	buildStarPoly(.5,6,0,0)
	symbolFileValue.value=symbolFileDiv.innerHTML
	createSymbolDef()
	placeSomeSymbols()

	symbolUseValue.value=symbolUseDiv.innerHTML
	showSourceJS()
}

//----create regular polygon based on a radius length:circumradius (radius of a circle passing through all points)--
function regPolyCircleRad(vCnt,radius,centerX,centerY)
{
	var myPoints=Pgon8.points
	var polyXPts      = Array(vCnt);
	var polyYPts      = Array(vCnt);
	var vertexAngle   = 360/vCnt;
	//---init polygon points processor---
	for(var v=0; v<vCnt; v++)
	{
		theAngle = (v*vertexAngle)*Math.PI/180;
		polyXPts[v] = radius*Math.cos(theAngle);
		polyYPts[v] = -radius*Math.sin(theAngle);
	}
	//--note points are CCW(this is important for future ref)---
	for(var v=0;v<vCnt; v++)
	{
		var point=symbolSVGFile.createSVGPoint();
		point.x=centerX+polyXPts[v]
		point.y=centerY+polyYPts[v]
		myPoints.appendItem(point)
	}
}
function buildStarPoly(radius,starPoints,centerX,centerY)
{
	var myPoints=Star6.points

	var theta=Math.PI*2/starPoints;
	var r=radius
	//---ccw points---
	for(i=0;i<starPoints;i++)
	{
		var k=i+1;
		var sineAngle=Math.sin(theta*k);
		var cosineAngle=Math.cos(theta*k);
		var x1=r/2*sineAngle+centerX;
		var y1=r/2*cosineAngle+centerY;
		//----add alpha line, end star pnts----
		var sineAngleAlpha=Math.sin(theta*k+.5*theta);
		var cosineAngleAlpha=Math.cos(theta*k+.5*theta);
		var x2=r*sineAngleAlpha+centerX;
		var y2=r*cosineAngleAlpha+centerY;

		var point1=symbolSVGFile.createSVGPoint();
		point1.x=x1
		point1.y=y1
		myPoints.appendItem(point1)
		var point2=symbolSVGFile.createSVGPoint();
		point2.x=x2
		point2.y=y2
		myPoints.appendItem(point2)
	}
}

function createSymbolDef()
{
   var cloneG=Pgon8Star6.cloneNode(true)
   cloneG.id=Pgon8Star6.id+"Clone"
   symbolDefs.appendChild(cloneG)
   sizeMe(cloneG,30)///---polygons contained in <g>
   cloneG.setAttribute("size","30")
   cloneG.firstChild.setAttribute("fill","red")
   cloneG.lastChild.setAttribute("fill","blue")
}

function placeSomeSymbols()
{
	var mySymbol=document.getElementById(Pgon8Star6.id+"Clone" )
	var utcMS=new Date().getTime() //---time stamp in milliseconds--

	var symbolClone1=mySymbol.cloneNode(true)
	symbolClone1.id=Pgon8Star6.id+"_"+utcMS
	symbolClone1.setAttribute("transform","translate(60 60)")
	mySVG.appendChild(symbolClone1)

	var symbolClone2=mySymbol.cloneNode(true)
	symbolClone2.id=Pgon8Star6.id+"_"+utcMS+1
	symbolClone2.setAttribute("transform","translate(150 150)")
	mySVG.appendChild(symbolClone2)

	var symbolClone3=mySymbol.cloneNode(true)
	symbolClone3.id=Pgon8Star6.id+"_"+utcMS+2
	symbolClone3.setAttribute("transform","translate(240 240)")
	mySVG.appendChild(symbolClone3)

}

//---user size 30x30 px---
function sizeMe(cloneG,size)
{
	for(var k=0;k<cloneG.childNodes.length;k++)
	{
       var pgon=cloneG.childNodes.item(k)
	   pgon.setAttribute("transform","scale("+size+")")
       computePolyPoints(mySVG,pgon)
	}
}

//---changes all transformed points to screen points---
function computePolyPoints(mySVG,myPoly)
{
	var sCTM = myPoly.getCTM()
	var pointsList = myPoly.points;
	var n = pointsList.numberOfItems;
	for(var m=0;m<n;m++)
	{
		var mySVGPoint = mySVG.createSVGPoint();
		mySVGPoint.x = pointsList.getItem(m).x
		mySVGPoint.y = pointsList.getItem(m).y
		mySVGPointTrans = mySVGPoint.matrixTransform(sCTM)
		pointsList.getItem(m).x=mySVGPointTrans.x
		pointsList.getItem(m).y=mySVGPointTrans.y
	}
	//---force removal of transform--
	myPoly.setAttribute("transform","")
	myPoly.removeAttribute("transform")
}

</script>

</body>

</html>