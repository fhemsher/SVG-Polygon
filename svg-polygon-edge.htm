<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Create Regular Polygon By Edge Length</title>

<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <script type="text/javascript" src="highlight.pack.js"></script>
  <script type="text/javascript" src="highlightCode.js"></script>
  <link href='highlight.css' rel='stylesheet' />
</head>
<body style='padding:0px;font-family:arial;background:#f0f8ff'>
<center>
<h4>Create Regular Polygon By Edge Length</h4>
<div style='width:90%;background-color:gainsboro;text-align:justify;padding:10px;border-radius:6px;'>
Build a regular  polygon with a specific edge length. Transform it via <b>matrices</b>, then re-compute its transformed points. Uses polygon <b>points object</b>, <b>getCTM</b>, and <b>matrixTransform</b>
<center><img src="Images/edge.png" alt="" /> </center>
To accomplish this via matrices uses:
<br />1.  A <b>matrix object</b> that holds all transform requests.
<br />2.  A  <b>transform list</b> attached to the element to be transformed( a polygon in this example).
<br />3.  After each transform,  <b>consolidate()</b> the transform list into a matrix.
<br />Then...
<br />

Re-compute its transformed points to screen points using: <b>points object</b>, <b>getCTM</b>, and <b>matrixTransform</b> .
<br>
Selecting 'Screen Points', removes the transforms, and builds the polygon with a re-computed list of points.
</div>

<div id=svgDiv style='width:400px;height:400px;background-color:lightgreen'>
<svg id="mySVG" width="400" height="400">
<polygon id="myPolygon" stroke="blue" stroke-width="1" fill="yellow" />
<circle id="centroidCircle" fill="red" r="4" stroke-width="1" stroke="black"/>
</svg>

</div>
 <br />
Edge Length: <input id=edgeLengthValue type="text" style=width:40px value=150 />px.

 Points:<select onChange=buildPolygon() id=polygonPointsSelect>
<option>3</option>
<option>4</option>
<option selected>5</option>
<option>6</option>
<option>7</option>
<option>8</option>
<option>9</option>
<option>10</option>
 </select>
&nbsp;&nbsp;&nbsp;&nbsp;

Transforms:
<button onClick=rotate()>rotate</button>
<button onClick=scaleXY()>scaleXY</button>
<button onClick=skewX()>skewX</button>
<button onClick=skewY()>skewY</button>
&nbsp;&nbsp;&nbsp;&nbsp;<button onClick=computePolyScreenPoints(mySVG,myPolygon)>Screen Points</button>
<button onClick=startOver()>start over</button>

<br />  SVG Source:
  <div id=svgSourceDiv style=overflow:auto;width:100%;height:1px;text-align:left; /></div>
  Javascript:
  <div id=jsCodeDiv style=overflow:auto;width:100%;text-align:left; /></div>
</center>
<script id=myScript>
document.addEventListener("onload",init(),false)
var Centroid
var TransformRequestObj
var TransformList
//---onload---
function initTransform()
{
	TransformRequestObj=mySVG.createSVGTransform()
	var animTransformList=myPolygon.transform
	TransformList=animTransformList.baseVal
	centroidCircle.setAttribute("cx",Centroid[0])
	centroidCircle.setAttribute("cy",Centroid[1])
}
function init()
{

	buildPolygon()
	Centroid=polygonCentroid(myPolygon)
	initTransform()

    showSourceSVG()
    showSourceJS()

}
/*---List property & methods---
var MyList=myPolygon.points
MyList.numberOfItems-Gets or sets the number of items in a list.
MyList.appendItem(newItem)-Inserts a new item at the end of the list.
MyList.clear()-Clears all existing items from the list, which creates an empty list.
MyList.getItem(index)-Returns the specified item from a list.
MyList.initialize(myItem)-Clears current items from the list and re-initializes the list to contain the specified item.
MyList.insertItemBefore(newItem,index)-Inserts a new item into a list at a specified position.
MyList.removeItem(myItem)-Removes an existing item from the list.
MyList.replaceItem(newItem,index)-Replaces a specified existing item in the list with a specified new item.

 e.g.
	var pointsList = myPolygon.points;
	var n = pointsList.numberOfItems;
	for(var k=0;k<n;k++)
	{
		var x=pointsList.getItem(k).x
		var y=pointsList.getItem(k).y
	}

var newPoint=mySVG.createSVGPoint()
newPoint.x=some x value
newPoint.y=some y value

*/
//---init and onChange----
function buildPolygon()
{
	var edgeLen=parseInt(edgeLengthValue.value,10)
	var vCnt=parseInt(polygonPointsSelect.options[polygonPointsSelect.selectedIndex].text,10)
	//---regPolyEdgeLenth(vCnt,edge,centerX,centerY)---
	regPolyEdgeLenth(vCnt,edgeLen,200,200)
}

//---create polygon with specific edge length---
function regPolyEdgeLenth(vCnt,edge,cx,cy)
{
    var myPoints=myPolygon.points
    myPoints.clear()
    var polyXPts      = Array(vCnt);
    var polyYPts      = Array(vCnt);
    var vertexAngle   = 360/vCnt;
    var computeRad=.5*edge/Math.sin((vertexAngle/2)*Math.PI/180)
	//---init polygon points processor---
	for(var v=0; v<vCnt; v++)
	{
		theAngle = (v*vertexAngle)*Math.PI/180;
		polyXPts[v] = computeRad*Math.cos(theAngle);
		polyYPts[v] = -computeRad*Math.sin(theAngle);
	}
	//--note points are CCW(this is important for future ref)---
	for(var v=0;v<vCnt; v++)
	{
		var point=mySVG.createSVGPoint();
		point.x=cx+polyXPts[v]
		point.y=cy+polyYPts[v]
		myPoints.appendItem(point)
	}
}

function polygonCentroid(myPolygon)
{
	var pointList=myPolygon.points
	var m=pointList.numberOfItems
	var total_area = 0;
	var centroid = [0, 0];
	var a = pointList.getItem(0);
	for (i = 0; i < m - 2; i++)
	{
		var b = pointList.getItem(i + 1), c = pointList.getItem(i + 2);
		var area = 0.5 * Math.abs((a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y));
		total_area += area;
		centroid[0] += area * (a.x + b.x + c.x);
		centroid[1] += area * (a.y + b.y + c.y);
	}
	centroid[0] /= total_area * 3;
	centroid[1] /= total_area * 3;

	return centroid
}

//--button--
function rotate()
{
	var angle=10

	TransformRequestObj.setRotate(angle,Centroid[0],Centroid[1])
	TransformList.appendItem(TransformRequestObj)
	TransformList.consolidate()

	showSourceSVG()
}
//---button---
function scaleXY()
{
	var scaleX=1.05
	var scaleY=1.05

	TransformRequestObj.setTranslate(Centroid[0],Centroid[1])
	TransformList.appendItem(TransformRequestObj)
	TransformList.consolidate()
	TransformRequestObj.setScale(scaleX,scaleY)
	TransformList.appendItem(TransformRequestObj)
	TransformList.consolidate()
	TransformRequestObj.setTranslate(-Centroid[0],-Centroid[1])
	TransformList.appendItem(TransformRequestObj)
	TransformList.consolidate()

	showSourceSVG()

}
//---button---
function skewX()
{
	var skwX=5 //---deg

	TransformRequestObj.setTranslate(Centroid[0],Centroid[1])
	TransformList.appendItem(TransformRequestObj)
	TransformList.consolidate()

	TransformRequestObj.setSkewX(skwX)
	TransformList.appendItem(TransformRequestObj)
	TransformList.consolidate()

	TransformRequestObj.setTranslate(-Centroid[0],-Centroid[1])
	TransformList.appendItem(TransformRequestObj)
	TransformList.consolidate()

   showSourceSVG()
}
//---button---
function skewY()
{
	var skwY=10 //---deg
	TransformRequestObj.setTranslate(Centroid[0],Centroid[1])
	TransformList.appendItem(TransformRequestObj)
	TransformList.consolidate()

	TransformRequestObj.setSkewY(skwY)
	TransformList.appendItem(TransformRequestObj)
	TransformList.consolidate()

	TransformRequestObj.setTranslate(-Centroid[0],-Centroid[1])
	TransformList.appendItem(TransformRequestObj)
	TransformList.consolidate()

	showSourceSVG()
}
//---button---
function startOver()
{
	//---force removal---
	myPolygon.setAttribute("transform","")
	myPolygon.removeAttribute("transform")

	buildPolygon()
	//---reinstate a transform attribute---
	myPolygon.setAttribute("transform","")
	TransformRequestObj=mySVG.createSVGTransform()
	var animTransformList=myPolygon.transform
	TransformList=animTransformList.baseVal

	showSourceSVG()
}
//---changes all transformed points to screen points---
function computePolyScreenPoints(mySVG,myPoly)
{
	var sCTM = myPoly.getCTM()
	myPolygon.setAttribute("transform","")
	myPolygon.removeAttribute("transform")
	var pointsList = myPoly.points;
	var n = pointsList.numberOfItems;
	for(var m=0;m<n;m++)
	{
		var mySVGPoint = mySVG.createSVGPoint();
		mySVGPoint.x = pointsList.getItem(m).x
		mySVGPoint.y = pointsList.getItem(m).y
		mySVGPointTrans = mySVGPoint.matrixTransform(sCTM)
		pointsList.getItem(m).x=mySVGPointTrans.x
		pointsList.getItem(m).y=mySVGPointTrans.y
	}
	//---reinstate a transform attribute---
	myPolygon.setAttribute("transform","")
	//---reset---
	TransformRequestObj=mySVG.createSVGTransform()
	var animTransformList=myPolygon.transform
	TransformList=animTransformList.baseVal

	showSourceSVG()
}

</script>

</body>

</html>