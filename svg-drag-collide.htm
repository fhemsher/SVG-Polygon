<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Drag/Drop Collision Detection</title>
  <script type="text/javascript" src="highlight.pack.js"></script>
  <script type="text/javascript" src="highlightCode.js"></script>
  <link href='highlight.css' rel='stylesheet' />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<style type="text/css">
<!--
text {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}
-->
</style>
</head>
<body style='padding:10px;font-family:arial;background:#f0f8ff'>
<center>
<h4>Drag/Drop Collision Detection</h4>
<div style='width:90%;background-color:gainsboro;text-align:justify;padding:10px;border-radius:6px;'>
When dragging an SVG element, show when its edge collides with its neighbors.
</div>
<table><tr>
<td>
<div style="padding:10px;width:400px;text-align:justify">

<b>Scenario:</b><br />
Each element is draggable. When moving the element, if it collides with another, its collided element(s) will become opaque.
<br>


<p></p>

</div>
</td>
<td>
<div id="svgDiv" style='background-color:linen;width:400px;height:400px;'>
<svg id=mySVG width=400 height=400   onmousedown="startDrag(evt)" onmousemove="drag(evt)" onmouseup="endDrag()">
 <g id=pgonG display="none"/>
<path style='cursor:move' class=dragTarget id=myPath  fill="violet" stroke-width="2" stroke="black" d="M10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80"/>
<ellipse style='cursor:move'  class=dragTarget  id=myEllipse cx=320 cy=335 rx=40 ry=20 fill="green"  stroke-width=2 stroke="black" />
<circle style='cursor:move'  class=dragTarget  id=myCircle cx=80 cy=330 r=30 fill="blue" stroke-width=2 stroke="black" />
<rect style='cursor:move'  class=dragTarget  id=myRect x=250 y=40 width=50 height=30 fill="maroon" stroke-width=2 stroke="black" />
<polygon style='cursor:move' transform="translate(-160,-100)skewX(20)skewY(30)"  class=dragTarget  id=myPolygon  stroke="black" fill="darkorange" stroke-width='2' points="223.776 267.725 247.553 244.549 214.695 239.775 200 210 185.305 239.775 152.447 244.549 176.224 267.725 170.611 300.451 200 285 229.389 300.451" />
<polyline  style='cursor:move' class=dragTarget  id=myPolyline fill='red'  points="200,100 266,100 133,170 200,170"  stroke-width='2' stroke="black" />
<text style='cursor:move'  class=dragTarget  id=myText text-anchor="middle" fill="red" stroke="black" stroke-width=1 x=300 y=200 font-size=30 >This is text</text>
</svg>
</div>

</td>
</tr></table>
  <br />SVG Source:
  <div id=svgSourceDiv style=overflow:auto;width:100%;height:1px;text-align:left; /></div>
  Javascript:
  <div id=jsCodeDiv style=overflow:auto;width:100%;height:300px;text-align:left; /></div><p></p>
</center>
<script id=myScript>
var NS="http://www.w3.org/2000/svg"
var TransformRequestObj
var TransList
var TransformRequestObjParent
var TransListCollideParent
var DragTarget=null;
var Dragging = false;
var DragStartGrabX = 0;
var DragStartGrabY = 0;
var DragChildrenPoints=[]
//---mouse down over element---
function startDrag(evt)
{
    if(!Dragging) //---prevents dragging conflicts on other draggable elements---
    {
        if(evt.target.getAttribute("class")=="dragTarget")
        {
            DragTarget = evt.target;

            //---clear previous---
            for(k=pgonG.childNodes.length-1;k>=0;k--)
                pgonG.removeChild(pgonG.childNodes.item(k))

            DragTarget.setAttribute("opacity",1)

            setTimeout(getDragParentChildren(DragTarget),500)

            //---reference point to its respective viewport--
            var pnt = DragTarget.ownerSVGElement.createSVGPoint();
            pnt.x = evt.clientX;
            pnt.y = evt.clientY;
            //---elements transformed and/or in different(svg) viewports---
            var sCTM = DragTarget.getScreenCTM();
            var Pnt = pnt.matrixTransform(sCTM.inverse());

            TransformRequestObj = DragTarget.ownerSVGElement.createSVGTransform()
            //---attach new or existing transform to element, init its transform list---
            var myTransListAnim=DragTarget.transform
            TransList=myTransListAnim.baseVal


            //---the point on the element to grab as its dragging point---
            DragStartGrabX = Pnt.x
            DragStartGrabY = Pnt.y

            Dragging=true;
        }
    }
}

function getDragParentChildren(DragTarget)
{
    //----set Parent/Children Polygons---
    PolygonDragParent=[]
    PolygonDragChildren=[]

    if(DragTarget.nodeName=="circle")
         circle2Polygon(myCircle,"parent")
    else if(DragTarget.nodeName=="rect")
         rect2Polygon(myRect,"parent")
    else if(DragTarget.nodeName=="ellipse")
         ellipse2Polygon(myEllipse,"parent")
    else if(DragTarget.nodeName=="path")
         path2Polygon(myPath,"parent")
    else if(DragTarget.nodeName=="polygon")
         polygon2Polygon(myPolygon,"parent")
    else if(DragTarget.nodeName=="text")
         text2Polygon(myText,"parent")
    else if(DragTarget.nodeName=="polyline")
           polyline2Pgons(myPolyline,"parent") //---creates polygon for each leg---

    if(DragTarget.nodeName!="circle")
         circle2Polygon(myCircle,"child")
    if(DragTarget.nodeName!="rect")
         rect2Polygon(myRect,"child")
    if(DragTarget.nodeName!="ellipse")
         ellipse2Polygon(myEllipse,"child")
    if(DragTarget.nodeName!="path")
         path2Polygon(myPath,"child")
    if(DragTarget.nodeName!="polygon")
         polygon2Polygon(myPolygon,"child")
    if(DragTarget.nodeName!="text")
         text2Polygon(myText,"child")
    if(DragTarget.nodeName!="polyline")
         polyline2Pgons(myPolyline,"child") //---creates polygon for each leg---

    DragChildrenPoints=[]
    for(m=0;m<PolygonDragChildren.length;m++)
    {
        var pgonChild=PolygonDragChildren[m]
        var shapeChild=pgonChild.id
        var myElem=document.getElementById(pgonChild.getAttribute("myElem"))
        var bPoints=pgonChild.points
        var n=bPoints.numberOfItems

        //---ignore 'close' leg of polygon---
        if(shapeChild.indexOf("pgonPolyline")!=-1||shapeChild=="pgonLine"||shapeChild=="pgonPathOpen"||shapeChild=="pgonPathOpenSmooth")
            minusB=-1
        else
            minusB=0

        for(var k=0;k<n+minusB;k++) //--each side of polygon---
        {
            var bX1=bPoints.getItem(k).x
            var bY1=bPoints.getItem(k).y

            if(k<n-1)
            {
                var bX2=bPoints.getItem(k+1).x
                var bY2=bPoints.getItem(k+1).y
            }
            else
            {
                var bX2=bPoints.getItem(0).x
                var bY2=bPoints.getItem(0).y
            }

            DragChildrenPoints.push([myElem,[bX1,bY1,bX2,bY2]])
        }
    }
}
//---mouse move---
function drag(evt)
{
    if(Dragging)
    {
        var pnt = DragTarget.ownerSVGElement.createSVGPoint();
        pnt.x = evt.clientX;
        pnt.y = evt.clientY;
        //---elements in different(svg) viewports, and/or transformed ---
        var sCTM = DragTarget.getScreenCTM();
        var Pnt = pnt.matrixTransform(sCTM.inverse());
        Pnt.x -= DragStartGrabX;
        Pnt.y -= DragStartGrabY;

        TransformRequestObj.setTranslate(Pnt.x,Pnt.y)
        TransList.appendItem(TransformRequestObj)
        TransList.consolidate()


        getCollisions(DragTarget,Pnt.x,Pnt.y)
    }
}

//--mouse up---
function endDrag()
{
    Dragging = false ;
    showSourceSVG()
}

//---dragging---
function getCollisions(DragTarget,transX,transY)
{
    var collide=false
    var collidedElems=[]
   for(var k=0;k<PolygonDragParent.length;k++)
   {
          var pgonParent=PolygonDragParent[k]
          var shapeParent=pgonParent.id
          if(DragTarget.nodeName=="polygon")
            setTargetPnts(pgonParent,DragTarget)
          else
          {
                pgonParent.setAttribute("transform","translate("+transX+" "+transY+")")
                ctmPolygon(pgonParent)
            }

          var aPoints=pgonParent.points
          var m=aPoints.numberOfItems

        //---ignore 'close' leg of polygon---
        if(shapeParent.indexOf("pgonPolyline")!=-1||shapeParent=="pgonLine"||shapeParent=="pgonPathOpen"||shapeParent=="pgonPathOpenSmooth")
            minusA=-1
        else
            minusA=0

    	for(var i=0;i<m+minusA;i++)
    	{
    		var aX1=aPoints.getItem(i).x
    		var aY1=aPoints.getItem(i).y

    		if(i<m-1)
    		{
    			var aX2=aPoints.getItem(i+1).x
    			var aY2=aPoints.getItem(i+1).y
    		}
    		else
    		{
    			var aX2=aPoints.getItem(0).x
    			var aY2=aPoints.getItem(0).y
    		}

            for(var p=0;p<DragChildrenPoints.length;p++)
            {
                var child=DragChildrenPoints[p][0]
                var id=child.id
                var childPnts=DragChildrenPoints[p][1]
                if(lineSegIntersect(aX1,aY1,aX2,aY2,childPnts[0],childPnts[1],childPnts[2],childPnts[3]))
                {
                      collide=true
                      child.setAttribute("opacity",.4)
                      if(collidedElems.toString().indexOf(id)==-1)
                            collidedElems.push(id)
                }
                else if(child.getAttribute("opacity"==".4") )
                {
                    for(ce=0;ce<collidedElems.length;ce++)
                    {
                         var ceId=collidedElems[ce]
                         if(ceId==id)
                         {
                            collidedElems.slice(ce,1)
                            child.setAttribute("opacity",1)
                            break
                         }
                    }
                }
            }
        }
   }
    for(ce=0;ce<collidedElems.length;ce++)
        document.getElementById(collidedElems[ce]).setAttribute("opacity",.4)

       if(collide==false)
       {
           var dragElems=document.getElementsByClassName("dragTarget")
           for(var k=0;k<dragElems.length;k++)
           {
              dragElems[k].setAttribute("opacity",1)
           }
       }
}
//---remove transform, create screen points for polygon---
function ctmPolygon(myPoly)
{
	var ctm = myPoly.getCTM()
	var svgRoot = myPoly.ownerSVGElement

	var pointsList = myPoly.points;
	var n = pointsList.numberOfItems;

	for(var m=0; m < n; m++)
	{
		var mySVGPoint = svgRoot.createSVGPoint();
		mySVGPoint.x = pointsList.getItem(m).x
		mySVGPoint.y = pointsList.getItem(m).y
		mySVGPointTrans = mySVGPoint.matrixTransform(ctm)
		pointsList.getItem(m).x=mySVGPointTrans.x
		pointsList.getItem(m).y=mySVGPointTrans.y
	};

	myPoly.removeAttribute("transform")
}

function setTargetPnts(pgonParent,DragTarget)
{
	var ctm = DragTarget.getCTM()
	var svgRoot = DragTarget.ownerSVGElement;
	var pointsList = DragTarget.points;
	var pointsListParent = pgonParent.points;
	var n = pointsList.numberOfItems;

	for(var m=0; m < n; m++)
	{
		var mySVGPoint = svgRoot.createSVGPoint();
		mySVGPoint.x = pointsList.getItem(m).x
		mySVGPoint.y = pointsList.getItem(m).y
		mySVGPointTrans = mySVGPoint.matrixTransform(ctm)
	   	pointsListParent.getItem(m).x=mySVGPointTrans.x
		pointsListParent.getItem(m).y=mySVGPointTrans.y

	};

}

//---compare two lines: A.B---
function lineSegIntersect(aX1,aY1,aX2,aY2,bX1,bY1,bX2,bY2)
{
	//---compute vectors Va, Vb--------
	var Va=( (bX2-bX1)*(aY1-bY1) - (bY2-bY1)*(aX1-bX1) )/ ( (bY2-bY1)*(aX2-aX1) - (bX2-bX1)*(aY2-aY1) )
	var Vb=( (aX2-aX1)*(aY1-bY1) - (aY2-aY1)*(aX1-bX1) )/( (bY2-bY1)*(aX2-aX1) - (bX2-bX1)*(aY2-aY1) )

	if(Va>0 && Va<1 && Vb>0 && Vb<1)
        return true
	else
	    return false
}

//=============Elements to Polygons===================
var PolygonDragParent=[]
var PolygonDragChildren=[]

function polygon2Polygon(myPolygon,locale)
{
     var pgon=document.createElementNS(NS,"polygon")
     pgon.id="pgonPolygon"
     pgon.setAttribute("myElem","myPolygon")
     pgonG.appendChild(pgon)
    if(locale=="parent")
      PolygonDragParent.push(pgon)
    else
       PolygonDragChildren.push(pgon)

    pgon.setAttribute("points",myPolygon.getAttribute("points"))
    if(myPolygon.getAttribute("transform") )
    {
        var trfm=myPolygon.getAttribute("transform")
        pgon.setAttribute("transform",trfm)
       ctmPolygon(pgon)
    }

}

function path2Polygon(myPath,locale)
{
    var pgon=document.createElementNS(NS,"polygon")

    pgon.setAttribute("myElem","myPath")
    pgonG.appendChild(pgon)
    if(locale=="parent")
        PolygonDragParent.push(pgon)
    else
        PolygonDragChildren.push(pgon)

    var pntStng=myPath.getAttribute("d")
    if(pntStng.indexOf("z")!=-1||pntStng.indexOf("Z")!=-1)
        var id="pgonPath"
    else
        var id="pgonPathOpen"

    //---is this a linear or smooth path?---
    var pathStng=myPath.getAttribute("d").toLowerCase()
    if(  //---smooth path--
    pathStng.indexOf("c")!=-1
    ||pathStng.indexOf("q")!=-1
    ||pathStng.indexOf("t")!=-1
    ||pathStng.indexOf("q")!=-1
    ||pathStng.indexOf("s")!=-1
    ||pathStng.indexOf("a")!=-1
    )
    id+="Smooth"
    pgon.id=id

    //---is path closed?---
    var d=myPath.getAttribute("d")
    var Z=""
    if(d.indexOf("z")!=-1)
        Z="z"
    if(d.indexOf("Z")!=-1)
        Z="Z"

    if(Z=="z"||Z=="Z")
    {
        d=d.replace(Z,"")
        var tempPath=document.createElementNS(NS,'path')
        tempPath.setAttribute("d",d)
        var endLength=tempPath.getTotalLength()
    }
    else
        var endLength=myPath.getTotalLength()

     var pathStng=myPath.getAttribute("d").toLowerCase()
     if(  //---smooth path--
         pathStng.indexOf("c")!=-1
         ||pathStng.indexOf("q")!=-1
         ||pathStng.indexOf("t")!=-1
         ||pathStng.indexOf("q")!=-1
         ||pathStng.indexOf("s")!=-1
         ||pathStng.indexOf("a")!=-1
     )
        var pathSmooth=true
     else
        var pathSmooth=false

     if(pathSmooth)
     {
        var segCnt=150

        var pntList=pgon.points
        var lengthDelta=endLength/segCnt

        var pntList=pgon.points
        for(var k=0;k<segCnt;k++)
        {
           var len=lengthDelta*k
           if(len<endLength)
           {
                var pnt=myPath.getPointAtLength(len)
                pntList.appendItem(pnt)
           }
           else
            break;

        }
    }
    else  //---straight path: create a polygon---
    {
        var len = myPath.getTotalLength();
        var p=myPath.getPointAtLength(0);
        var seg = myPath.getPathSegAtLength(0);
        var pnts=p.x+","+p.y;

        for(var i=1; i<len; i++)
        {
           p=myPath.getPointAtLength(i);

            if (myPath.getPathSegAtLength(i)>seg)
            {
                pnts=pnts+" "+p.x+","+p.y;
                seg = myPath.getPathSegAtLength(i);
            }
        }
        pgon.setAttribute("points",pnts)
    }

    if(myPath.getAttribute("transform"))
    {
        pgon.setAttribute("transform",myPath.getAttribute("transform"))
        ctmPolygon(pgon)
    }

}

function rect2Polygon(myRect,locale)
{
    var pgon=document.createElementNS(NS,"polygon")
    pgon.id="pgonRect"
    pgon.setAttribute("myElem","myRect")
    pgonG.appendChild(pgon)
    if(locale=="parent")
        PolygonDragParent.push(pgon)
    else
        PolygonDragChildren.push(pgon)

    var x=+myRect.getAttribute("x")
    var y=+myRect.getAttribute("y")
    var w=+myRect.getAttribute("width")
    var h=+myRect.getAttribute("height")
    var pnts1=[x,y, x,y+h, x+w,y+h, x+w,y]
    pgon.setAttribute("points",pnts1.join())

    if(myRect.getAttribute("transform"))
    {
        pgon.setAttribute("transform",myRect.getAttribute("transform"))
        ctmPolygon(pgon)
    }
}

function circle2Polygon(myCircle,locale)
{
    var pgon=document.createElementNS(NS,"polygon")
    pgon.id="pgonCircle"
    pgon.setAttribute("myElem","myCircle")
    pgonG.appendChild(pgon)
    if(locale=="parent")
        PolygonDragParent.push(pgon)
    else
        PolygonDragChildren.push(pgon)

     var myPoints=pgon.points

	var r=+myCircle.getAttribute("r")
	var cx=+myCircle.getAttribute("cx")
	var cy=+myCircle.getAttribute("cy")

    var vCnt=100
	var polyXPts      = Array(vCnt);
	var polyYPts      = Array(vCnt);
	var vertexAngle   = 360/vCnt;
	//---init polygon points processor---
	for(var v=0; v<vCnt; v++)
	{
		var theAngle = (v*vertexAngle)*Math.PI/180;
		polyXPts[v] = r*Math.cos(theAngle);
		polyYPts[v] = -r*Math.sin(theAngle);
	}

	for(var v=0;v<vCnt; v++)
	{
		var point=mySVG.createSVGPoint();
		point.x=cx+polyXPts[v]
		point.y=cy+polyYPts[v]
		myPoints.appendItem(point)
	}

     if(myCircle.getAttribute("transform") )
    {
        var trfm=myCircle.getAttribute("transform")
        pgon.setAttribute("transform",trfm)
        ctmPolygon(pgon)
    }
}

function line2Polygon(myLine,locale) //---
{
    var pgon=document.createElementNS(NS,"polygon")
    pgon.id="pgonLine"
    pgon.setAttribute("myElem","myLine")
    pgonG.appendChild(pgon)
    if(locale=="parent")
        PolygonDragParent.push(pgon)
    else
        PolygonDragChildren.push(pgon)

    var x1=+myLine.getAttribute("x1")
    var y1=+myLine.getAttribute("y1")
    var x2=+myLine.getAttribute("x2")
    var y2=+myLine.getAttribute("y2")

    var pnts1=[x1,y1, x2,y2]
    pgon.setAttribute("points",pnts1.join())

    if(myLine.getAttribute("transform") )
    {
      var trfm=myLine.getAttribute("transform")
       pgon.setAttribute("transform",trfm)
       ctmPolygon(pgon)
    }

}

/*
     the polyline is separated into individual
     polygons for each leg
 */
var PolylinePgons=[]
var PolylineIntersectPolygon
var PolylineShape //---other shape compared to the polyline--
function polyline2Pgons(myPolyline,locale) //---
{
     var points=myPolyline.points
     for(var k=0;k<points.length;k++)
     {
        if(k<points.length-1)
        {
            var xy1=points[k]
            var xy2=points[k+1]
            pnts=[xy1.x,xy1.y,xy2.x,xy2.y]
         //---create a polygon for each leg---
            var pgon=document.createElementNS(NS,"polygon")
            pgon.setAttribute("points",pnts.join())
            pgon.id="pgonPolyline"+k
            pgon.setAttribute("myElem","myPolyline")
            pgon.setAttribute("stroke-width","20")
            pgon.setAttribute("fill","blue")
            pgonG.appendChild(pgon)
            if(myPolyline.getAttribute("transform") )
            {
                var trfm=myPolyline.getAttribute("transform")
                pgon.setAttribute("transform",trfm)
                ctmPolygon(pgon)
            }
              if(locale=="parent")
                    PolygonDragParent.push(pgon)
                else
                    PolygonDragChildren.push(pgon)
        }
    }
}
function ellipse2Polygon(myEllipse,locale) //---
{
    var pgon=document.createElementNS(NS,"polygon")
    pgon.id="pgonEllipse"
    pgon.setAttribute("myElem","myEllipse")
    pgonG.appendChild(pgon)
    if(locale=="parent")
        PolygonDragParent.push(pgon)
    else
        PolygonDragChildren.push(pgon)

    var myPoints=pgon.points

	var rx=+myEllipse.getAttribute("rx")
	var ry=+myEllipse.getAttribute("ry")
	var cx=+myEllipse.getAttribute("cx")
	var cy=+myEllipse.getAttribute("cy")

    var vCnt=20
	var polyXPts      = Array(vCnt);
	var polyYPts      = Array(vCnt);
	var vertexAngle   = 360/vCnt;
	//---init polygon points processor---
	for(var v=0; v<vCnt; v++)
	{
		var theAngle = (v*vertexAngle)*Math.PI/180;
		polyXPts[v] = rx*Math.cos(theAngle);
		polyYPts[v] = -ry*Math.sin(theAngle);
	}

	for(var v=0;v<vCnt; v++)
	{
		var point=mySVG.createSVGPoint();
		point.x=cx+polyXPts[v]
		point.y=cy+polyYPts[v]
		myPoints.appendItem(point)
	}

     if(myEllipse.getAttribute("transform") )
    {
        var trfm=myEllipse.getAttribute("transform")
        pgon.setAttribute("transform",trfm)
        ctmPolygon(pgon)
    }

}

function text2Polygon(myText,locale)
{
    var pgon=document.createElementNS(NS,"polygon")
    pgon.id="pgonText"
    pgon.setAttribute("myElem","myText")
    pgonG.appendChild(pgon)
    if(locale=="parent")
        PolygonDragParent.push(pgon)
    else
        PolygonDragChildren.push(pgon)
    //---create a polygon around text---
    var bb1=myText.getBBox()
    var bb1x=bb1.x
    var bb1y=bb1.y
    var bb1w=bb1.width
    var bb1h=bb1.height
    var pnts1=[bb1x,bb1y,bb1x,bb1y+bb1h,bb1x+bb1w,bb1y+bb1h,bb1x+bb1w,bb1y]
    pgon.setAttribute("points",pnts1.join())

    if(myText.getAttribute("transform"))
    {
        pgon.setAttribute("transform",myText.getAttribute("transform"))
        ctmPolygon(pgon)
    }

}
//================================================================================


</script>
<script>
document.addEventListener("onload",init(),false)
function init()
{

   	showSourceSVG()
	showSourceJS()

}
</script>

</body>

</html>