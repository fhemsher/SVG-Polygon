<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Convex Polygons Counter-Clockwise Points</title>
  <script type="text/javascript" src="highlight.pack.js"></script>
  <script type="text/javascript" src="highlightCode.js"></script>
  <link href='highlight.css' rel='stylesheet' />
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
</head>
<body style='padding:0px;font-family:arial;background:#f0f8ff'>
<center>
<h4>Convex Polygons Counter-Clockwise Points</h4>
<div style='width:90%;background-color:gainsboro;text-align:justify;padding:10px;border-radius:10px;'>
A <b>convex polygon</b> (aka Convex Hull) has no angles pointing inwards. More precisely, no internal angles can be more than 180 degrees.
Polygons should have their points arranged counter-clockwise(CCW). This will assure various computations are consistant.
This example arranges a group of points so they are CCW, and builds the resultatnt polygon. (It also extracts any points that would create a concave polygon.)
Computes the convex hull(polygon) using the "Graham scan" method. </div>
<table>
<tr>
<td align=center>
Non-Contiguous Coordinates
 <table border=1 cellpadding=4>
 <tr><td>0</td><td><span id=pointRandSpan0></span></td></tr>
 <tr><td>1</td><td><span id=pointRandSpan1></span></td></tr>
 <tr><td>2</td><td><span id=pointRandSpan2></span></td></tr>
 <tr><td>3</td><td><span id=pointRandSpan3></span></td></tr>
 <tr><td>4</td><td><span id=pointRandSpan4></span></td></tr>
 <tr><td>5</td><td><span id=pointRandSpan5></span></td></tr>
 <tr><td>6</td><td><span id=pointRandSpan6></span></td></tr>
 </table>
 <br /><button onClick=randomPoints()>1.) Random Points</button>
</td>
<td>
<div id="svgDiv" style='background-color:lightblue;width:400px;height:400px;'>
<svg id="mySVG" width="400" height="400">
<polygon id=myPolygon fill="yellow" stroke="blue" stroke-width="3" />
<circle id="firstPointCircle" r="8" fill="lime" />
<circle id="circle0" r="4" fill="black" />
<circle id="circle1" r="4" fill="black" />
<circle id="circle2" r="4" fill="black" />
<circle id="circle3" r="4" fill="black" />
<circle id="circle4" r="4" fill="black" />
<circle id="circle5" r="4" fill="black" />
<circle id="circle6" r="4" fill="black" />
</svg>
</div>
<center><button onClick=polygonCCW()>2.) Create CCW Polygon</button></center>
</td>
<td align=center>Polygon CCW Coordinates
 <table border=1 cellpadding=4>
 <tr><td>0</td><td><span id=point0Span></span></td></tr>
 <tr><td>1</td><td><span id=point1Span></span></td></tr>
 <tr><td>2</td><td><span id=point2Span></span></td></tr>
 <tr><td>3</td><td><span id=point3Span></span></td></tr>
 <tr><td>4</td><td><span id=point4Span></span></td></tr>
 <tr><td>5</td><td><span id=point5Span></span></td></tr>
 <tr><td>6</td><td><span id=point6Span></span></td></tr>
  </table>

 </td>
</tr>
</table>

 <br />  SVG Source:
  <div id=svgSourceDiv style=overflow:auto;width:100%;height:1px;text-align:left; /></div>
  Javascript:
  <div id=jsCodeDiv style=overflow:auto;width:100%;text-align:left; /></div>

</center>
<div id='browserDiv' style='padding:3px;position:absolute;top:5px;left:5px;background-color:gainsboro;'></div>
<script id=myScript>

var RandomPnts=[]
//---1.button---
function randomPoints()
{
	//---Generate 7 random points---
	function times(n, fn)
	{
	    var a = [], i;
	    for (i = 0; i < n; i++) {
	        a.push(fn(i));
	    }
	    return a;
	}
	RandomPnts = times(7, function() { return [Math.floor(360 * Math.random()) + 20, Math.floor(360 * Math.random()) + 20] });
    //---show points---
	for(var k=0;k<7;k++)
	{
		document.getElementById("pointRandSpan"+k).innerHTML=RandomPnts[k]
		var circle=document.getElementById("circle"+k)
		circle.setAttribute("cx",RandomPnts[k][0])
		circle.setAttribute("cy",RandomPnts[k][1])
	}

	showSourceSVG()
}

//---2.button---
function polygonCCW()
{
	var ccwCoords=computeConvexHull(RandomPnts)
	myPolygon.setAttribute("points",ccwCoords.join())
	//---show first point----
	var cxy=ccwCoords[0]
	firstPointCircle.setAttribute("cx",cxy[0])
	firstPointCircle.setAttribute("cy",cxy[1])
	showSourceSVG()
	//---show points in table---
	point0Span.style.backgroundColor="lime"
	point0Span.innerHTML=ccwCoords[0]
	point1Span.innerHTML=ccwCoords[1]
	point2Span.innerHTML=ccwCoords[2]
	if(ccwCoords[3])
	point3Span.innerHTML=ccwCoords[3]
	else
	point3Span.innerHTML=""

	if(ccwCoords[4])
	point4Span.innerHTML=ccwCoords[4]
	else
	point4Span.innerHTML=""

	if(ccwCoords[5])
	point5Span.innerHTML=ccwCoords[5]
	else
	point5Span.innerHTML=""

	if(ccwCoords[6])
	point6Span.innerHTML=ccwCoords[6]
	else
	point6Span.innerHTML=""

}

/*
	points = [[x1, y1], [x2, y2], â€¦] ---
	 Computes the convex hull using the "Graham scan" method
	 http://en.wikipedia.org/wiki/Graham_scan
	 returns CCW points for a convex polygon---
*/
function computeConvexHull(points)
{
	function min(a, fn)
	{
		if (!a.length)
		{
			return -1;
		}

		var i = 0;
		for (var j = 1; j < a.length; j++)
		{
			if (fn(a[i], a[j]) < 0)
			i = j;
		}
		return i;
	}

	function ccw(p1, p2, p3)
	{
		return (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0]);
	}

	var n = points.length;

	//--- Find the point with the lowest y coordinate (breaking ties by looking at the x coordinate)---
	var i = min(points, function(a, b) { return a[1] == b[1] ? b[0] - a[0] : b[1] - a[1] });

	//--- Take it out of the array---
	var p = points[i];
	points[i] = null;

	//--- Put an extra entry in the array---
	points.push(null);

	//--- Sort the points by the angle that the line from p to the point makes with the x axis---
	points.sort(function(a, b)
	{
		return !a ? -1 : (!b ? 1 : (a[0] - p[0]) / (a[1] - p[1]) - (b[0] - p[0]) / (b[1] - p[1]));
	});

	//--- Now the first two elements of points should be null---
	//--- Place the lowest-y-coordinate point at p[1], and a sentinel value at p[0]---
	points[0] = points[n];
	points[1] = p;

	var m = 2;
	for (i = 3; i <= n; i++)
	{
		//---Look at the next point---
		while (ccw(points[m - 1], points[m], points[i]) >= 0)
		{
			/*
				 If adding the next point would make the polygon non-convex,
				 remove the most recently added point from the convex polygon
				 we're building up.
			*/
			m--;
		}

		//--- Add this point to the convex polygon ---
		m++;
		points[m] = points[i];
	}

	//---m=usable points for polygon---
	var myPoints=points.slice(0,m)
	return myPoints
}
</script>
<script>
document.addEventListener("onload",init(),false)
function init()
{
randomPoints()
polygonCCW()
showSourceSVG()
showSourceJS()
}
</script>
</body>

</html>